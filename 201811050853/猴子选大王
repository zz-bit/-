数组#include "stdio.h"
int main（）
{
	int m,n,number,count=1;		//number记猴子剩余个数，count记当前报数
	int monkey[999];
	int t;						//t记数组下标
	int i;
	printf("请输入猴子个数 m 和报数 n ：");
	scanf("%d%d",&m,&n);
	number = m;
	for(i=0;i<m;i++)
		monkey[i]=i+1;
	t=0;
	while(number>1)
	{
		if(monkey[t]>0)
		{
			if(count!=n)
			{
				count++;
				t=(t+1)%m;		//t=(t+1)%m实现数组下标加1
			}
			else
			{
				monkey[t]=0;
				count=1;
				number--;
				t=(t+1)%m;
			}
		}
		else
		{
			t=(t+1)%m;
		}
	}
	for(i=0;i<m;i++)
	{
		if(monkey[i]>0)
			printf("猴子大王：%d\n",monkey[i]);
	}
	返回0;
}
链表法
#include<stdio.h>
#include<time.h>
#include<stdlib.h>
#define OK 1
#define ERROR 0
#define TRUE 1
#define FALSE 0
#define maxsize 10
typedef int status;
typedef int elemtype;

typedef struct node{
    elemtype num;
    struct node * next;
}node;

typedef struct node* linklist;

int main(void){
    linklist p,q,head;
    int m,n,king,i,j;
    scanf("%d %d",&m,&n);
    if(m==1)//只有一只猴子时猴王为1 
       king=1;
    p=q=(linklist)malloc(sizeof(node));//给新节点分配空间 
    head=p;//head指向首元素节点 
    head->num=1;//给第一只猴子编号 
    for(i=1;i<m;i++){//建立m只猴子围成的圆圈 
        p=(linklist)malloc(sizeof(node));//p为等待插入的节点 
        p->num=i+1;//p的编号为i+1 
        q->next=p;//q始终记录尾节点(实质是链表的尾插法) 
        q=p;
    }
    q->next=head;//链表尾指向链表头 

    p=head;//开始计数 
    for(i=1;i<m;i++){//循环m-1轮，淘汰m-1只猴子 
        for(j=1;j<n-1;j++){//让p指向要淘汰的元素的前驱元素 
            p=p->next;
        }
            q=p->next;//q指向要淘汰的猴子 
            printf("第%d轮淘汰第%d只猴子\n",i,q->num);
            p->next=q->next;//删除q 
            p=q->next;//一定要让下一次计数起点为被删除元素的后继 
            free(q);//释放q 
    }
    king=p->num;
    free(p);
    printf("猴王是第%d\n",king);
}
